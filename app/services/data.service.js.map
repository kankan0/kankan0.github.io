{"version":3,"file":"data.service.js","sourceRoot":"","sources":["file:///C:/Users/lvxu/workspace/angular2/kankan/tmp/broccoli_type_script_compiler-input_base_path-f4YojrGj.tmp/0/src/app/services/data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from \"@angular/http\";\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport * as moment from 'moment';\n\n@Injectable()\nexport class DataService {\n\n  private todayGank: any = null;\n\n  constructor(private http: Http) { }\n\n  fetchCategoryDetailOfToday(category: string) {\n    return Observable.create(observer => {\n      if (this.todayGank == null) {\n        this.fetchByDateRecursively(new Date(), true).subscribe(\n          data => {\n            this.todayGank = data;\n            observer.next(this.todayGank.results[category]);\n            observer.complete();\n          }\n        );\n      } else {\n        observer.next(this.todayGank.results[category]);\n        observer.complete();\n      }\n    });\n  }\n\n  fetchCategoryOfToday() {\n    return Observable.create(observer => {\n      if (this.todayGank == null) {\n        this.fetchByDateRecursively(new Date(), true).subscribe(\n          data => {\n            this.todayGank = data;\n            observer.next(this.todayGank.category);\n            observer.complete();\n          }\n        );\n      } else {\n        console.log(JSON.stringify(this.todayGank.category));\n        observer.next(this.todayGank.category);\n        observer.complete();\n      }\n    });\n  }\n\n  private fetchByDateRecursively(date: Date, loadOneDayBefore: boolean) {\n    return Observable.create(observer => {\n      this.fetchByDate(date).subscribe(\n        data => {\n          //console.log(JSON.stringify(data));\n          if (data.category.length == 0) {\n            this.fetchByDateRecursively(moment(date).subtract(1, 'day').toDate(), false);\n          } else {\n            observer.next(data);\n            observer.complete();\n          }\n        }\n      );\n    });\n\n\n  }\n\n  fetchByDate(date: Date) {\n    let url:string = 'http://gank.io/api/day/' + moment(date).format('YYYY/MM/DD');\n    console.log('fetch data of date : ' + url);\n    return this.http.get(url).map((response: Response) => response.json());\n  }\n\n  fetchByCategory(category: string, count: number, page : number) {\n    let url:string = 'http://gank.io/api/data/' + category + '/' + count + '/' + page;\n    console.log('fetch data of category : ' + url);\n    return this.http.get(url).map((response: Response) => response.json());\n  }\n\n\n  fetchByUrl(url: string) {\n    return this.http.get(url).map((response: Response) => response.text());\n  }\n\n}\n"]}